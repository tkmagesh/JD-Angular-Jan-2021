RIA
    Rich Internet Applications
    Applications - Dynamic
    More Interactive
    Client Driven (Run in the browser)
    User Experience (UX)

CWA
    Classical Web Application
    Server Driven
    The complete application (with all the below layers are in the server)

Application Layers

    User Interface (UI Layer)
        Controllers
        Views
        Models

    Domain Layer (Business Logic Layer)
    Repository Layer (Data Access Layer)


PoEAA (Patterns of Enterprise Application Architecture)

Browser
    UI (HTML DOM CSS) (UI Frameworks like Angular, React, Vue, Backbone)
    Infrastructure (HTML5) (caniuse.com)
        Storage
            Local Storage`
            Session Storage
            IndexedDB
        Server Sent Events
        Web Sockets
        Web RTC
        Device

Maintainability (Effort needed to make changes)
    Fix bugs
    add new features
    remove dead code
    optimize existing functionality

Separation of Concerns

    tight coupling  (the entities are related in such a way that a change in one leads to a change in the other)
    loose coupling (changes in one entity DOES NOT force a change in the other)


Angular Building Blocks
    1. Component
        - encapsulates Presentation + User Interaction Logic + Data

    2. Pipe
        - data transformation logic for Presentation

    3. Directive
        - low level DOM manipulation

    4. Service
        - Non UI responsibilities

    5. Module
        - Register all the other application entities
        - There should be a minimum of 1 module in an application
        - application bootstrap happens through a module
        - Dependency Injection is taken care

ES6
    1. let
    2. const
    3. Array destructuring
    4. Rest operator (Array)
    5. Spread operator (Array)
    6. Object destructuring
    7. Rest operator (Object)
    8. Spread operator (Object)
    9. Object construction
    10. default arguments
    11. arrow functions
    12. template strings
    13. class (tomorrow)

    http://es6-features.org

TypeScript
    - Superset of javascript
    - plain javascript is VALID typescript
    - www.typescriptlang.org

Javascript is loosely typed

class Employee{
    public void M(){
        int x = 10;
        .
        .
        x = "abc"
    }
}


var x : number = 10;
function add(x : number, y : number) : number {
    return x + y;
}

add("100",200)

class Employee{

}

interfaces
enum
generics

var abc = 100;

    |
    V
    tsc
    |
    |
    V

function Employee{

}
var x  = 10;
function add(x , y )  {
    return x + y;
}

Assignment
    Study the following methods of 'Array' in javascript
        - map, reduce, filter, forEach


Angular CLI
Node.js (to provide the runtime for angular cli)

JS Module Systems
    AMD (Asynchronous Module Definition)
    CommonJS (used in node.js)
    ES6 modules

ES6 Modules
    - Everything defined in a JS/TS file is considered private by default
    - Anything to be exposed publicly has to be explicity 'exported'
    - Anything to be used from another module (ES6) has to be explicity 'imported'
      

Directives
    - Attribute Directive
        - manipulates the attributes of an EXISTING dom node
        - DO NOT change the structure of the DOM TREE
        - used by wrapping with []

    - Structural Directive
        - CHANGES the structure of the DOM tree by adding / removing DOM nodes
        - used by prefixing with an '*' (shortcut)

Asynchronous Operation
    Initiated but not waited for its completion

    callback (singular)
    event emitter (multiple)
    promises (singular)
    async await (singular)
    observable (multiple)

source of events
    keyboard (multiple)
    mouse (multiple)
    XMLHTTPRequest (singular)
    setInterval (multiple)
    web sockets (multiple)
    server sent events (multiple)


Observable = Inverse of Enumerable (generator)
    where Enumerable = lazy Iterable


var list;
for(let index = 0; count = list.length; index < count; index++){
    var item = list[index];
}

class Iterator(){
    list = [];

    index = 0;

    constructor(data){
        this.list = data;
    }
    next(){
        ++index;
        if (index < count) return list[index]
        return false;
    }
}

var iterable = new Iterator(list);
var item = iterable.next()

function getEvenNos(howMany){
    returning howMany even numbers;
}

30 engineers
    Specialized in Java
    min 5 years experience
    residing in Pune

3000 resumes

interview 10 candidates = hire 1 candidate

to be interviewed = 300 candidates

filter 300 resumes from the 3000 resumes received


Event Driven Applications
    = An application whose execution flow is driven by events

Employee.dat
    id, name, doj, email, salary

program to calculate the average salary of employees

    var count = 0
        total = 0;

    open file;
    while (read file()){
        parse the line
        ++count
        total += salary
    }
    average = total/count;
    print average
    close file


Event Stream = Occur across a time line one after another


Rx.Net
    Reactive Extensions
    Observables
        utility methods
            filter
            map
            reduce
            scan
            merge
rxjs

Assignment
    Create the UI for projects (listing from server and adding new projects) in the same application


http://www.amazon.in
http://www.amazon.in/electronics
http://www.amazon.in/electronics/phones
http://www.amazon.in/electronics/phones/google
http://www.amazon.in/electronics/phones/google/google-pixel-2

http://www.amazon.in/electronics/phones/google/google-pixel-2/reviews


Outlook
Outlook/Inbox
Outlook/Inbox/Projects
Outlook/Inbox/Projects/payroll-master
Outlook/Inbox/Projects/payroll-master/bugs
Outlook/Inbox/Projects/payroll-master/bugs/bug-101

Angular
    Behavior - Desktop Application
    Technology - Web Application

http://localhost:4200
http://localhost:4200/calculator
http://localhost:4200/greeter
http://localhost:4200/products

URL
-------------------------#--------------------
    Server                          Client


Angular Forms

    Accepting Data
    Validations
    Visual Feedback
    Display error messages

    Template Forms
        template centric
        Majority of the code is written in the component template

    Reactive Forms
        code centric
        Majority of the code is written in the component class

ng-touched & ng-untouched -> whether the control is visited or not
ng-pristine & ng-dirty -> whether the data in the control is modified or not
ng-invalid & ng-valid -> whether the data in the control is valid or not


Testing
=======

Jasmine
    BDD framework

    describe
    it
    expect (assertion)

    xdescribe
    xit

    fdescribe
    fit

    matchers
        - toBe